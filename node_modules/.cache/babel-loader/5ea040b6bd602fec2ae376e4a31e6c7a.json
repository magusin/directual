{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hugo\\\\code\\\\akatek\\\\directual\\\\src\\\\pages\\\\PrivatePage.js\";\nimport React, { useEffect, useState } from 'react';\nimport Directual from 'directual-api';\nimport { useAuth } from '../auth';\nimport { Loader } from '../components/loader/loader';\nimport { Card, CardBody, CardHeader, CardText, CardTitle, Container } from 'reactstrap'; // Example of getting data from Directual\n// Connect to Directual api\n\nconst api = new Directual({\n  apiHost: '/'\n});\nexport default function PrivatePage() {\n  // API-endpoint details\n  const dataStructure = 'product'; // todo: write here sysname of your data structure\n\n  const endpoint = 'profileProduct'; // todo: write here Method name of your API-endpoint\n  // connect authentication context\n\n  const auth = useAuth(); // Hooks for handling state\n\n  const [payload, setPayload] = useState([]); // API response\n\n  const [pageInfo, setPageInfo] = useState({}); // API response metadata, e.g. number of objects\n\n  const [loading, setLoading] = useState(true); // initial loader\n\n  const [badRequest, setBadRequest] = useState(); // API error message\n\n  const [pageSize] = useState(2); // Page size, bu default = 10\n  // Paging\n\n  useEffect(() => {\n    getData(); // eslint-disable-next-line\n  }, []); // GET-request\n\n  function getData() {\n    api // Data structure\n    .structure(dataStructure) // GET request + query params (sessionID, page, pageSize by default)\n    .getData(endpoint, {\n      sessionID: auth.sessionID,\n      pageSize: pageSize\n    }) // other possible query params:\n    // {{HttpRequest}} — any param for Filtering\n    // sort=FIELD_SYSNAME_1,desc,FIELD_SYSNAME_2,asc — sorting with multiple params\n    .then(response => {\n      setPayload(response.payload);\n      setPageInfo(response.pageInfo);\n      setLoading(false);\n    }).catch(e => {\n      // handling errors\n      setLoading(false);\n      console.log(e.response);\n      setBadRequest(e.response.status + ', ' + e.response.data.msg);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, loading && /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }), payload && !loading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"request-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Data structure: \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 33\n    }\n  }, dataStructure ? dataStructure : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 69\n    }\n  }, \"not provided\"))), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"API-endpoint: \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 31\n    }\n  }, endpoint ? endpoint : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 57\n    }\n  }, \"not provided\"))), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"Payload: \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 26\n    }\n  }, JSON.stringify(payload))), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, \"Payload info: \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 31\n    }\n  }, JSON.stringify(pageInfo))), badRequest && /*#__PURE__*/React.createElement(\"code\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 26\n    }\n  }, \"Error: \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 57\n    }\n  }, badRequest))), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, payload.map(data => /*#__PURE__*/React.createElement(Card, {\n    className: \"border-1 border-primary text-center mb-2 \",\n    key: data.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CardTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 19\n    }\n  }, data.title))), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CardText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 19\n    }\n  }, data.description)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, data.company)))))));\n}","map":{"version":3,"sources":["C:/Users/Hugo/code/akatek/directual/src/pages/PrivatePage.js"],"names":["React","useEffect","useState","Directual","useAuth","Loader","Card","CardBody","CardHeader","CardText","CardTitle","Container","api","apiHost","PrivatePage","dataStructure","endpoint","auth","payload","setPayload","pageInfo","setPageInfo","loading","setLoading","badRequest","setBadRequest","pageSize","getData","structure","sessionID","then","response","catch","e","console","log","status","data","msg","JSON","stringify","map","id","title","description","company"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Directual from 'directual-api'\r\nimport { useAuth } from '../auth'\r\nimport { Loader } from '../components/loader/loader'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardText,\r\n  CardTitle,\r\n  Container\r\n} from 'reactstrap'\r\n\r\n// Example of getting data from Directual\r\n\r\n// Connect to Directual api\r\nconst api = new Directual({ apiHost: '/' })\r\n\r\nexport default function PrivatePage () {\r\n    // API-endpoint details\r\n    const dataStructure = 'product' // todo: write here sysname of your data structure\r\n    const endpoint = 'profileProduct' // todo: write here Method name of your API-endpoint\r\n\r\n    // connect authentication context\r\n    const auth = useAuth()\r\n  \r\n    // Hooks for handling state\r\n    const [payload, setPayload] = useState([]) // API response\r\n    const [pageInfo, setPageInfo] = useState({}) // API response metadata, e.g. number of objects\r\n    const [loading, setLoading] = useState(true) // initial loader\r\n    const [badRequest, setBadRequest] = useState() // API error message\r\n    const [pageSize] = useState(2) // Page size, bu default = 10\r\n  \r\n     // Paging\r\n  useEffect(() => {\r\n    \r\n    getData()\r\n    // eslint-disable-next-line\r\n  }, [])\r\n   \r\n  // GET-request\r\n  function getData() {\r\n    api\r\n      // Data structure\r\n      .structure(dataStructure)\r\n      // GET request + query params (sessionID, page, pageSize by default)\r\n      .getData(endpoint, {\r\n        sessionID: auth.sessionID,\r\n        pageSize: pageSize\r\n      })\r\n      // other possible query params:\r\n      // {{HttpRequest}} — any param for Filtering\r\n      // sort=FIELD_SYSNAME_1,desc,FIELD_SYSNAME_2,asc — sorting with multiple params\r\n      .then((response) => {\r\n        setPayload(response.payload)\r\n        setPageInfo(response.pageInfo)\r\n        setLoading(false)\r\n      })\r\n      .catch((e) => {\r\n        // handling errors\r\n        setLoading(false)\r\n        console.log(e.response)\r\n        setBadRequest(e.response.status + ', ' + e.response.data.msg)\r\n      })\r\n  }\r\n  return (\r\n    <div className=\"content\">\r\n    {loading && <Loader />}\r\n    {payload && !loading && (\r\n      <div>\r\n        {/* API response */}\r\n        <div className=\"request-info\">\r\n          <span>Data structure: <b>{dataStructure ? dataStructure : <span className=\"error\">not provided</span>}</b></span>\r\n          <span>API-endpoint: <b>{endpoint ? endpoint : <span className=\"error\">not provided</span>}</b></span>\r\n          <span>Payload: <code>{JSON.stringify(payload)}</code></span>\r\n          <span>Payload info: <code>{JSON.stringify(pageInfo)}</code></span>\r\n          {badRequest && <code className=\"error\">Error: <b>{badRequest}</b></code>}\r\n        </div>\r\n        <Container>\r\n          {payload.map((data) => (\r\n            <Card\r\n              className=\"border-1 border-primary text-center mb-2 \"\r\n              key={data.id}\r\n            >\r\n              <CardHeader>\r\n                <CardTitle>\r\n                  <h3>{data.title}</h3>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n                {/* <img alt='none' src={data.file} className='image'></img> */}\r\n                <CardText>\r\n                  <p>{data.description}</p>\r\n                </CardText>\r\n                <p>{data.company}</p>\r\n              </CardBody>\r\n            </Card>\r\n          ))}\r\n        </Container>\r\n      </div>\r\n    )}\r\n  </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}