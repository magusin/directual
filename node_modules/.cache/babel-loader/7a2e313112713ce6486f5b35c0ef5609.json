{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hugo\\\\code\\\\akatek\\\\directual\\\\directual-react-boilerplate\\\\src\\\\pages\\\\Page1.js\";\nimport React, { useEffect, useState } from 'react';\nimport Directual from 'directual-api';\nimport { useAuth } from '../auth';\nimport { Loader } from '../components/loader/loader';\nimport { Card, CardBody, CardHeader, CardText, CardTitle } from 'reactstrap'; // Example of getting data from Directual\n// Connect to Directual api\n\nconst api = new Directual({\n  apiHost: '/'\n});\nexport default function Page1() {\n  // API-endpoint details\n  const dataStructure = 'article'; // todo: write here sysname of your data structure\n\n  const endpoint = 'getArticle'; // todo: write here Method name of your API-endpoint\n  // connect authentication context\n\n  const auth = useAuth(); // Hooks for handling state\n\n  const [payload, setPayload] = useState([]); // API response\n\n  const [pageInfo, setPageInfo] = useState({}); // API response metadata, e.g. number of objects\n\n  const [loading, setLoading] = useState(true); // initial loader\n\n  const [badRequest, setBadRequest] = useState(); // API error message\n\n  const [pageLoading, setPageLoading] = useState(false); // paging loader\n\n  const [pageNum, setPageNum] = useState(0); // Page number, by default = 0\n\n  const [pageSize, setPageSize] = useState(10); // Page size, bu default = 10\n  // Paging\n\n  useEffect(() => {\n    setPageLoading(true);\n    getData();\n  }, [pageNum]);\n\n  const nextPage = () => {\n    setPageLoading(true);\n    setPageNum(pageNum + 1);\n  };\n\n  const prevPage = () => {\n    setPageLoading(true);\n    setPageNum(pageNum - 1);\n  }; // GET-request\n\n\n  function getData() {\n    api // Data structure\n    .structure(dataStructure) // GET request + query params (sessionID, page, pageSize by default)\n    .getData(endpoint, {\n      sessionID: auth.sessionID,\n      page: pageNum,\n      pageSize: pageSize\n    }) // other possible query params:\n    // {{HttpRequest}} — any param for Filtering\n    // sort=FIELD_SYSNAME_1,desc,FIELD_SYSNAME_2,asc — sorting with multiple params\n    .then(response => {\n      setPayload(response.payload);\n      setPageInfo(response.pageInfo);\n      setLoading(false);\n      setPageLoading(false);\n    }).catch(e => {\n      // handling errors\n      setLoading(false);\n      setPageLoading(false);\n      console.log(e.response);\n      setBadRequest(e.response.status + ', ' + e.response.data.msg);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"Annonces\"), loading && /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  }), payload && !loading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, payload.map(data => /*#__PURE__*/React.createElement(Card, {\n    className: \"border-1 border-primary mx-auto\",\n    key: data.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(CardTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 16\n    }\n  }, data.title))), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: data.title,\n    src: data.file,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(CardText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 14\n    }\n  }, data.description))))), pageLoading && /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 27\n    }\n  }), !pageLoading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: pageNum <= 0 && \"disabled\",\n    onClick: prevPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }, \"prev\"), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: (badRequest || pageNum >= pageInfo.totalPage - 1) && \"disabled\",\n    onClick: nextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, \"next\"))));\n}","map":{"version":3,"sources":["C:/Users/Hugo/code/akatek/directual/directual-react-boilerplate/src/pages/Page1.js"],"names":["React","useEffect","useState","Directual","useAuth","Loader","Card","CardBody","CardHeader","CardText","CardTitle","api","apiHost","Page1","dataStructure","endpoint","auth","payload","setPayload","pageInfo","setPageInfo","loading","setLoading","badRequest","setBadRequest","pageLoading","setPageLoading","pageNum","setPageNum","pageSize","setPageSize","getData","nextPage","prevPage","structure","sessionID","page","then","response","catch","e","console","log","status","data","msg","map","id","title","file","description","totalPage"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Directual from 'directual-api';\r\nimport { useAuth } from '../auth'\r\nimport { Loader } from '../components/loader/loader';\r\nimport {Card, CardBody, CardHeader, CardText, CardTitle} from 'reactstrap'\r\n\r\n// Example of getting data from Directual\r\n\r\n// Connect to Directual api\r\nconst api = new Directual({ apiHost: '/' })\r\n\r\nexport default function Page1() {\r\n\r\n  // API-endpoint details\r\n  const dataStructure = 'article' // todo: write here sysname of your data structure\r\n  const endpoint = 'getArticle' // todo: write here Method name of your API-endpoint\r\n\r\n  // connect authentication context\r\n  const auth = useAuth();\r\n\r\n  // Hooks for handling state\r\n  const [payload, setPayload] = useState([]); // API response\r\n  const [pageInfo, setPageInfo] = useState({}); // API response metadata, e.g. number of objects\r\n  const [loading, setLoading] = useState(true); // initial loader\r\n  const [badRequest, setBadRequest] = useState(); // API error message\r\n  const [pageLoading, setPageLoading] = useState(false); // paging loader\r\n  const [pageNum, setPageNum] = useState(0); // Page number, by default = 0\r\n  const [pageSize, setPageSize] = useState(10); // Page size, bu default = 10\r\n\r\n  // Paging\r\n  useEffect(() => {\r\n    setPageLoading(true)\r\n    getData()\r\n  }, [pageNum])\r\n\r\n  const nextPage = () => {\r\n    setPageLoading(true)\r\n    setPageNum(pageNum + 1)\r\n  }\r\n  const prevPage = () => {\r\n    setPageLoading(true)\r\n    setPageNum(pageNum - 1)\r\n  }\r\n\r\n  // GET-request\r\n  function getData() {\r\n    api\r\n      // Data structure\r\n      .structure(dataStructure)\r\n      // GET request + query params (sessionID, page, pageSize by default)\r\n      .getData(endpoint, { sessionID: auth.sessionID, page: pageNum, pageSize: pageSize })\r\n      // other possible query params:\r\n      // {{HttpRequest}} — any param for Filtering\r\n      // sort=FIELD_SYSNAME_1,desc,FIELD_SYSNAME_2,asc — sorting with multiple params\r\n      .then((response) => {\r\n        setPayload(response.payload)\r\n        setPageInfo(response.pageInfo)\r\n        setLoading(false)\r\n        setPageLoading(false)\r\n      })\r\n      .catch((e) => {\r\n        // handling errors\r\n        setLoading(false)\r\n        setPageLoading(false)\r\n        console.log(e.response)\r\n        setBadRequest(e.response.status + ', ' + e.response.data.msg)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <h1>Annonces</h1>\r\n\r\n      {loading && <Loader />}\r\n      {payload && !loading &&\r\n        <div>\r\n\r\n          {/* API response */}\r\n          {/* <div className=\"request-info\">\r\n            <span>Data structure: <b>{dataStructure ? dataStructure : <span className=\"error\">not provided</span>}</b></span>\r\n            <span>API-endpoint: <b>{endpoint ? endpoint : <span className=\"error\">not provided</span>}</b></span>\r\n            <span>Payload: <code>{JSON.stringify(payload)}</code></span>\r\n            <span>Payload info: <code>{JSON.stringify(pageInfo)}</code></span>\r\n            {badRequest && <code className=\"error\">Error: <b>{badRequest}</b></code>}\r\n          </div> */}\r\n          {payload.map(data =>\r\n           <Card className='border-1 border-primary mx-auto' key={data.id}>\r\n             <CardHeader>\r\n               <CardTitle>\r\n               <h3 >{data.title}</h3>\r\n               </CardTitle>\r\n             </CardHeader>\r\n           <CardBody>\r\n           <img alt={data.title} src={data.file}></img>\r\n           <CardText>\r\n             <p>{data.description}</p>\r\n           </CardText>\r\n           </CardBody>\r\n         </Card>\r\n            )}\r\n         \r\n          {/* Paging */}\r\n          {pageLoading && <Loader />}\r\n          {!pageLoading &&\r\n            <div>\r\n              <button disabled={(pageNum <= 0) && \"disabled\"} onClick={prevPage}>prev</button>\r\n              <button disabled={(badRequest || (pageNum >= pageInfo.totalPage - 1)) && \"disabled\"} onClick={nextPage}>next</button>\r\n            </div>\r\n          }\r\n\r\n        </div>}\r\n    </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}