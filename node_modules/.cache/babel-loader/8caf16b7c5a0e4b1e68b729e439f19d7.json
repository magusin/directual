{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hugo\\\\code\\\\akatek\\\\directual\\\\src\\\\pages\\\\AdminPage.js\";\nimport React, { useState } from 'react';\nimport Directual from 'directual-api';\nimport { useAuth } from '../auth';\nimport { Loader } from '../components/loader/loader'; // Example of posting data to Directual\n// Connect to Directual api\n\nconst api = new Directual({\n  apiHost: '/'\n});\nexport default function AdminPage() {\n  // API-endpoint details\n  const dataStructure = 'product'; // todo: write here sysname of your data structure\n\n  const endpoint = 'postProduct'; // todo: write here Method name of your API-endpoint\n  // Connect authentication context\n\n  const auth = useAuth(); // Hooks for handling state\n\n  const [response, setResponse] = useState(); // API response\n\n  const [status, setStatus] = useState(); // Request status\n\n  const [badRequest, setBadRequest] = useState(); // API error message\n\n  const [loading, setLoading] = useState(false); // Loader\n\n  const [showForm, setShowForm] = useState(true); // Show/hide the form\n\n  const [formPayload, setFormPayload] = useState(); // Data to send. Here we can add userID: auth.user by default\n  // Reset the form\n\n  const resetForm = () => {\n    setResponse();\n    setStatus();\n    setBadRequest();\n    setShowForm(true);\n    setFormPayload({\n      userID: auth.user\n    }); // Don't forget to include userID: auth.user, if needed\n  }; // POST-request\n\n\n  function postData() {\n    setLoading(true);\n    setShowForm(false);\n    var data = new FormData();\n    var imagedata = document.querySelector('input[type=\"file\"]').files[0];\n    data.append(\"data\", imagedata);\n    fetch(\"https://api.directual.com/good/api/v5/data/test/testfileuploaded?appID=?&sessionID\", {\n      mode: 'no-cors',\n      method: \"POST\",\n      body: data\n    }).then(function (res) {\n      if (res.ok) {\n        alert(\"Perfect! \");\n      } else if (res.status === 401) {\n        alert(\"Oops! \");\n      }\n    }, function (e) {\n      alert(\"Error submitting form!\");\n    });\n    api // Data structure\n    .structure(dataStructure) // POST request + payload + query params:\n    .setData(endpoint, formPayload, {\n      sessionID: auth.sessionID\n    }).then(response => {\n      setResponse(response.result);\n      setStatus(response.status);\n      setLoading(false);\n    }).catch(e => {\n      // handling errors\n      setLoading(false);\n      console.log(e.response);\n      setBadRequest({\n        httpCode: e.response.status,\n        msg: e.response.data.msg\n      });\n    });\n  }\n\n  function uploadAction() {\n    var data = new FormData();\n    var imagedata = document.querySelector('input[type=\"file\"]').files[0];\n    data.append(\"data\", imagedata);\n    fetch(\"https://api.directual.com/good/api/v5/data/test/testfileuploaded?appID=?&sessionID\", {\n      mode: 'no-cors',\n      method: \"POST\",\n      body: data\n    }).then(function (res) {\n      if (res.ok) {\n        alert(\"Perfect! \");\n      } else if (res.status === 401) {\n        alert(\"Oops! \");\n      }\n    }, function (e) {\n      alert(\"Error submitting form!\");\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, \"Example of posting data\"), loading && /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 19\n    }\n  }), showForm && /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: postData,\n    enctype: \"multipart/form-data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Titre\",\n    onChange: e => {\n      setFormPayload({ ...formPayload,\n        'title': e.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Description\",\n    onChange: e => {\n      setFormPayload({ ...formPayload,\n        'description': e.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Company\",\n    onChange: e => {\n      setFormPayload({ ...formPayload,\n        'company': e.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    placeholder: \"File\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"upload\",\n    onClick: uploadAction.bind(this),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, \"Submit\")), response && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Submitted successfully\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, \"Response: \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 22\n    }\n  }, JSON.stringify(response))), status && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 20\n    }\n  }, \"Status: \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 31\n    }\n  }, JSON.stringify(status)))), badRequest && /*#__PURE__*/React.createElement(\"div\", {\n    class: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 22\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, badRequest.httpCode, \" error\"), badRequest.httpCode === '400' && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, \"API-endpoint is not configured properly.\"), badRequest.httpCode === '403' && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, \"You have to be logged in to submit this form.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 12\n    }\n  }, badRequest.msg))), !showForm && !loading && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, \"Submit again\"));\n}","map":{"version":3,"sources":["C:/Users/Hugo/code/akatek/directual/src/pages/AdminPage.js"],"names":["React","useState","Directual","useAuth","Loader","api","apiHost","AdminPage","dataStructure","endpoint","auth","response","setResponse","status","setStatus","badRequest","setBadRequest","loading","setLoading","showForm","setShowForm","formPayload","setFormPayload","resetForm","userID","user","postData","data","FormData","imagedata","document","querySelector","files","append","fetch","mode","method","body","then","res","ok","alert","e","structure","setData","sessionID","result","catch","console","log","httpCode","msg","uploadAction","target","value","bind","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport Directual from 'directual-api';\r\nimport { useAuth } from '../auth'\r\nimport { Loader } from '../components/loader/loader';\r\n\r\n// Example of posting data to Directual\r\n\r\n// Connect to Directual api\r\nconst api = new Directual({ apiHost: '/' })\r\n\r\nexport default function AdminPage () {\r\n    // API-endpoint details\r\n  const dataStructure = 'product' // todo: write here sysname of your data structure\r\n  const endpoint = 'postProduct' // todo: write here Method name of your API-endpoint\r\n\r\n  // Connect authentication context\r\n  const auth = useAuth();\r\n\r\n  // Hooks for handling state\r\n  const [response, setResponse] = useState(); // API response\r\n  const [status, setStatus] = useState(); // Request status\r\n  const [badRequest, setBadRequest] = useState(); // API error message\r\n  const [loading, setLoading] = useState(false); // Loader\r\n  const [showForm, setShowForm] = useState(true); // Show/hide the form\r\n  const [formPayload, setFormPayload] = useState(); // Data to send. Here we can add userID: auth.user by default\r\n\r\n  // Reset the form\r\n  const resetForm = () => {\r\n    setResponse()\r\n    setStatus()\r\n    setBadRequest()\r\n    setShowForm(true)\r\n    setFormPayload({userID: auth.user}) // Don't forget to include userID: auth.user, if needed\r\n  }\r\n\r\n  // POST-request\r\n  function postData() {\r\n    setLoading(true)\r\n    setShowForm(false)\r\n    var data = new FormData();\r\n    var imagedata = document.querySelector('input[type=\"file\"]').files[0];\r\n    data.append(\"data\", imagedata);\r\n    fetch(\"https://api.directual.com/good/api/v5/data/test/testfileuploaded?appID=?&sessionID\", {\r\n      mode: 'no-cors',\r\n      method: \"POST\",\r\n      body: data\r\n    }).then(function (res) {\r\n      if (res.ok) {\r\n        alert(\"Perfect! \");\r\n      } else if (res.status === 401) {\r\n        alert(\"Oops! \");\r\n      }\r\n    }, function (e) {\r\n      alert(\"Error submitting form!\");\r\n    });\r\n    api\r\n      // Data structure\r\n      .structure(dataStructure)\r\n      // POST request + payload + query params:\r\n      .setData(endpoint, formPayload,\r\n        { sessionID: auth.sessionID })\r\n      .then((response) => {\r\n        setResponse(response.result)\r\n        setStatus(response.status)\r\n        setLoading(false)\r\n      })\r\n      .catch((e) => {\r\n        // handling errors\r\n        setLoading(false)\r\n        console.log(e.response)\r\n        setBadRequest({\r\n          httpCode: e.response.status,\r\n          msg: e.response.data.msg\r\n        })\r\n      })\r\n  }\r\n\r\n  function uploadAction() {\r\n     var data = new FormData();\r\n     var imagedata = document.querySelector('input[type=\"file\"]').files[0];\r\n     data.append(\"data\", imagedata);\r\n     fetch(\"https://api.directual.com/good/api/v5/data/test/testfileuploaded?appID=?&sessionID\", {\r\n       mode: 'no-cors',\r\n       method: \"POST\",\r\n       body: data\r\n     }).then(function (res) {\r\n       if (res.ok) {\r\n         alert(\"Perfect! \");\r\n       } else if (res.status === 401) {\r\n         alert(\"Oops! \");\r\n       }\r\n     }, function (e) {\r\n       alert(\"Error submitting form!\");\r\n     });\r\n   }\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <h1>Example of posting data</h1>\r\n      {loading && <Loader />}\r\n      {showForm &&\r\n        <form onSubmit={postData} enctype=\"multipart/form-data\">\r\n          <input type=\"text\" placeholder='Titre' onChange={(e) => {\r\n            setFormPayload({ ...formPayload, 'title': e.target.value })\r\n          }} />\r\n          <input type=\"text\" placeholder='Description' onChange={(e) => {\r\n            setFormPayload({ ...formPayload, 'description': e.target.value })\r\n          }} />\r\n          <input type=\"text\" placeholder='Company' onChange={(e) => {\r\n            setFormPayload({ ...formPayload, 'company': e.target.value })\r\n          }} />\r\n           <input type=\"file\" placeholder='File'/>\r\n           <input type=\"button\" value=\"upload\" onClick={uploadAction.bind(this)}></input>\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      }\r\n\r\n      {/* Everything is OK */}\r\n      {response && <div>\r\n        <b>Submitted successfully</b>\r\n        <p>Response: <code>{JSON.stringify(response)}</code></p>\r\n        {status && <p>Status: <code>{JSON.stringify(status)}</code></p>}\r\n      </div>}\r\n\r\n      {/* Something went wrong */}\r\n      {badRequest && <div class=\"error\">\r\n        <b>{badRequest.httpCode} error</b>\r\n        {(badRequest.httpCode === '400') &&\r\n          <p>API-endpoint is not configured properly.</p>}\r\n        {(badRequest.httpCode === '403') &&\r\n          <p>You have to be logged in to submit this form.</p>}\r\n        <p><code>{badRequest.msg}</code></p>\r\n      </div>}\r\n\r\n      {/* Reset the form */}\r\n      {!showForm && !loading &&\r\n        <button onClick={resetForm}>\r\n          Submit again\r\n        </button>}\r\n\r\n    </div>\r\n  )\r\n  \r\n}"]},"metadata":{},"sourceType":"module"}