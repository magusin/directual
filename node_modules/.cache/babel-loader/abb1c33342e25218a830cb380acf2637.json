{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hugo\\\\code\\\\akatek\\\\directual\\\\directual-react-boilerplate\\\\src\\\\auth.js\";\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport Directual from 'directual-api';\nconst api = new Directual({\n  apiHost: '/'\n});\nexport const authContext = createContext();\nexport function ProvideAuth(_ref) {\n  let {\n    children\n  } = _ref;\n  const auth = useProvideAuth();\n  return /*#__PURE__*/React.createElement(authContext.Provider, {\n    value: auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 10\n    }\n  }, children);\n}\nexport const useAuth = () => {\n  return useContext(authContext);\n}; // Provide hook that creates auth object and handles state\n\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n  const [sessionID, setSessionID] = useState(null);\n  const [role, setRole] = useState(null);\n\n  const login = (username, password) => {\n    return api.auth.login(username, password).then(res => {\n      setUser(res.username);\n      setSessionID(res.sessionID);\n      setRole(res.role);\n      window.localStorage.setItem('sid', res.sessionID);\n    });\n  };\n\n  const signout = cb => {\n    return api.auth.logout('').then(res => {\n      setUser(null);\n      setRole(null);\n      setSessionID(null);\n      window.localStorage.setItem('sid', null);\n      cb();\n    });\n  };\n\n  const isAutorised = () => {\n    return !!user;\n  };\n\n  const hasRole = roleCheck => {\n    if (!roleCheck) {\n      return true;\n    }\n\n    return role === roleCheck;\n  };\n\n  useEffect(() => {\n    let sid = window.localStorage.getItem('sid') || '';\n    api.auth.isAuthorize(sid, (status, token) => {\n      if (status === true) {\n        setUser(token.username);\n        setSessionID(token.token);\n        setRole(token.role);\n      }\n    });\n  }, []);\n  return {\n    user,\n    sessionID,\n    login,\n    isAutorised,\n    signout,\n    hasRole\n  };\n}","map":{"version":3,"sources":["C:/Users/Hugo/code/akatek/directual/directual-react-boilerplate/src/auth.js"],"names":["React","useState","useEffect","useContext","createContext","Directual","api","apiHost","authContext","ProvideAuth","children","auth","useProvideAuth","useAuth","user","setUser","sessionID","setSessionID","role","setRole","login","username","password","then","res","window","localStorage","setItem","signout","cb","logout","isAutorised","hasRole","roleCheck","sid","getItem","isAuthorize","status","token"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,aAAjD,QAAsE,OAAtE;AACA,OAAOC,SAAP,MAAsB,eAAtB;AAEA,MAAMC,GAAG,GAAG,IAAID,SAAJ,CAAc;AAACE,EAAAA,OAAO,EAAE;AAAV,CAAd,CAAZ;AAEA,OAAO,MAAMC,WAAW,GAAGJ,aAAa,EAAjC;AAEP,OAAO,SAASK,WAAT,OAAmC;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACxC,QAAMC,IAAI,GAAGC,cAAc,EAA3B;AACA,sBAAO,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAED,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCD,QAApC,CAAP;AACD;AAED,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAOV,UAAU,CAACK,WAAD,CAAjB;AACD,CAFM,C,CAIP;;AACA,SAASI,cAAT,GAA0B;AACxB,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACiB,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,IAAD,CAAhC;;AAEA,QAAMmB,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACpC,WAAOhB,GAAG,CAACK,IAAJ,CAASS,KAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAmCC,IAAnC,CAAwCC,GAAG,IAAE;AAClDT,MAAAA,OAAO,CAACS,GAAG,CAACH,QAAL,CAAP;AACAJ,MAAAA,YAAY,CAACO,GAAG,CAACR,SAAL,CAAZ;AACAG,MAAAA,OAAO,CAACK,GAAG,CAACN,IAAL,CAAP;AACAO,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,KAA5B,EAAmCH,GAAG,CAACR,SAAvC;AACD,KALM,CAAP;AAMD,GAPD;;AASA,QAAMY,OAAO,GAAIC,EAAD,IAAQ;AACtB,WAAOvB,GAAG,CAACK,IAAJ,CAASmB,MAAT,CAAgB,EAAhB,EAAoBP,IAApB,CAAyBC,GAAG,IAAE;AACnCT,MAAAA,OAAO,CAAC,IAAD,CAAP;AACAI,MAAAA,OAAO,CAAC,IAAD,CAAP;AACAF,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAQ,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,KAA5B,EAAmC,IAAnC;AACAE,MAAAA,EAAE;AACH,KANM,CAAP;AAOD,GARD;;AAUA,QAAME,WAAW,GAAG,MAAM;AACxB,WAAO,CAAC,CAACjB,IAAT;AACD,GAFD;;AAIA,QAAMkB,OAAO,GAAIC,SAAD,IAAe;AAC7B,QAAG,CAACA,SAAJ,EAAc;AACZ,aAAO,IAAP;AACD;;AACD,WAAOf,IAAI,KAAKe,SAAhB;AACD,GALD;;AAOA/B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgC,GAAG,GAAGT,MAAM,CAACC,YAAP,CAAoBS,OAApB,CAA4B,KAA5B,KAAsC,EAAhD;AACA7B,IAAAA,GAAG,CAACK,IAAJ,CAASyB,WAAT,CAAqBF,GAArB,EAA0B,CAACG,MAAD,EAASC,KAAT,KAAiB;AACzC,UAAGD,MAAM,KAAK,IAAd,EAAmB;AACjBtB,QAAAA,OAAO,CAACuB,KAAK,CAACjB,QAAP,CAAP;AACAJ,QAAAA,YAAY,CAACqB,KAAK,CAACA,KAAP,CAAZ;AACAnB,QAAAA,OAAO,CAACmB,KAAK,CAACpB,IAAP,CAAP;AACD;AACF,KAND;AAOD,GATQ,EASN,EATM,CAAT;AAWA,SAAO;AACLJ,IAAAA,IADK;AAELE,IAAAA,SAFK;AAGLI,IAAAA,KAHK;AAILW,IAAAA,WAJK;AAKLH,IAAAA,OALK;AAMLI,IAAAA;AANK,GAAP;AAQD","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\r\nimport Directual from 'directual-api';\r\n\r\nconst api = new Directual({apiHost: '/'});\r\n\r\nexport const authContext = createContext();\r\n\r\nexport function ProvideAuth({ children }) {\r\n  const auth = useProvideAuth();\r\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\r\n}\r\n\r\nexport const useAuth = () => {\r\n  return useContext(authContext);\r\n};\r\n\r\n// Provide hook that creates auth object and handles state\r\nfunction useProvideAuth() {\r\n  const [user, setUser] = useState(null);\r\n  const [sessionID, setSessionID] = useState(null);\r\n  const [role, setRole] = useState(null);\r\n\r\n  const login = (username, password) => {\r\n    return api.auth.login(username, password).then(res=>{\r\n      setUser(res.username)\r\n      setSessionID(res.sessionID)\r\n      setRole(res.role)\r\n      window.localStorage.setItem('sid', res.sessionID)\r\n    })\r\n  };\r\n\r\n  const signout = (cb) => {\r\n    return api.auth.logout('').then(res=>{\r\n      setUser(null)\r\n      setRole(null)\r\n      setSessionID(null)\r\n      window.localStorage.setItem('sid', null)\r\n      cb()\r\n    })\r\n  };\r\n\r\n  const isAutorised = () => {\r\n    return !!user\r\n  }\r\n\r\n  const hasRole = (roleCheck) => {\r\n    if(!roleCheck){\r\n      return true\r\n    }\r\n    return role === roleCheck\r\n  }\r\n\r\n  useEffect(() => {\r\n    let sid = window.localStorage.getItem('sid') || ''\r\n    api.auth.isAuthorize(sid, (status, token)=>{\r\n      if(status === true){\r\n        setUser(token.username)\r\n        setSessionID(token.token)\r\n        setRole(token.role)\r\n      }\r\n    })\r\n  }, []);\r\n\r\n  return {\r\n    user,\r\n    sessionID,\r\n    login,\r\n    isAutorised,\r\n    signout,\r\n    hasRole\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}