{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = require(\"lodash\");\n/**\r\n * Returns true if the specified value is not undefined.\r\n *\r\n * @param val Variable to test.\r\n * @return Whether variable is defined.\r\n */\n\n\nfunction isDef(val) {\n  // void 0 always evaluates to undefined and hence we do not need to depend on\n  // the definition of the global variable named 'undefined'.\n  return val !== void 0;\n}\n\nexports.isDef = isDef;\n\nfunction isEmptyString(val) {\n  return val.trim().length === 0;\n}\n\nexports.isEmptyString = isEmptyString;\n\nfunction isNotEmptyString(val) {\n  return val.trim().length > 0;\n}\n\nexports.isNotEmptyString = isNotEmptyString;\n\nfunction isNotEmpty(val) {\n  return _.isEmpty(val) === false;\n}\n\nexports.isNotEmpty = isNotEmpty;\n/**\r\n * Compare function for string values by field.\r\n * @return {function(*, *):number}\r\n */\n\nfunction compareStringByField(fieldName) {\n  return function (a, b) {\n    return a[fieldName].localeCompare(b[fieldName], undefined, {\n      numeric: true\n    });\n  };\n}\n\nexports.compareStringByField = compareStringByField;\n/**\r\n * Number of digits greater than argument.\r\n *\r\n * Gets count of digits and compare with argument.\r\n * Note: this works only with integers, not floats.\r\n */\n\nfunction numberOfDigitsGreaterThan(val, digitsCount) {\n  return val.toString().length > digitsCount;\n}\n\nexports.numberOfDigitsGreaterThan = numberOfDigitsGreaterThan;\n/**\r\n * Extract `obj` from directual response.\r\n */\n\nfunction extractResponseObject(response) {\n  return _.get(response, 'obj', {});\n}\n\nexports.extractResponseObject = extractResponseObject;\n/**\r\n * Extract array result from directual response.\r\n */\n\nfunction extractResponseArray(response) {\n  return _.get(response, 'result.list', []);\n}\n\nexports.extractResponseArray = extractResponseArray;\n/**\r\n * Extract data from axios response.\r\n * @param {AxiosResponse} response\r\n * @return {*}\r\n */\n\nfunction extractResponseData(response) {\n  return response.data;\n}\n\nexports.extractResponseData = extractResponseData;\n/**\r\n * Convert string to array.\r\n */\n\nfunction stringToArray(val) {\n  if (val.length === 0) return [];\n  return val.split(',');\n}\n\nexports.stringToArray = stringToArray;","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAEA;;;;;AAKG;;;AACH,SAAA,KAAA,CAAsB,GAAtB,EAA8B;AAC5B;AACA;AACA,SAAO,GAAG,KAAK,KAAK,CAApB;AACD;;AAJD,OAAA,CAAA,KAAA,GAAA,KAAA;;AAMA,SAAA,aAAA,CAA8B,GAA9B,EAAyC;AACvC,SAAO,GAAG,CAAC,IAAJ,GAAW,MAAX,KAAsB,CAA7B;AACD;;AAFD,OAAA,CAAA,aAAA,GAAA,aAAA;;AAIA,SAAA,gBAAA,CAAiC,GAAjC,EAA4C;AAC1C,SAAO,GAAG,CAAC,IAAJ,GAAW,MAAX,GAAoB,CAA3B;AACD;;AAFD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAIA,SAAA,UAAA,CAA2B,GAA3B,EAAmC;AACjC,SAAO,CAAC,CAAC,OAAF,CAAU,GAAV,MAAmB,KAA1B;AACD;;AAFD,OAAA,CAAA,UAAA,GAAA,UAAA;AAIA;;;AAGG;;AACH,SAAA,oBAAA,CAAqC,SAArC,EAAsD;AACpD,SAAO,UAAC,CAAD,EAAS,CAAT,EAAe;AAAK,WAAA,CAAC,CAAC,SAAD,CAAD,CAAa,aAAb,CAA2B,CAAC,CAAC,SAAD,CAA5B,EAAyC,SAAzC,EAAoD;AAAE,MAAA,OAAO,EAA7D;AAAoD,KAApD,CAAA;AAAsE,GAAjG;AACD;;AAFD,OAAA,CAAA,oBAAA,GAAA,oBAAA;AAIA;;;;;AAKG;;AACH,SAAA,yBAAA,CAA0C,GAA1C,EAAuD,WAAvD,EAA0E;AACxE,SAAO,GAAG,CAAC,QAAJ,GAAe,MAAf,GAAwB,WAA/B;AACD;;AAFD,OAAA,CAAA,yBAAA,GAAA,yBAAA;AAIA;;AAEG;;AACH,SAAA,qBAAA,CAAsC,QAAtC,EAAsD;AACpD,SAAO,CAAC,CAAC,GAAF,CAAM,QAAN,EAAgB,KAAhB,EAAuB,EAAvB,CAAP;AACD;;AAFD,OAAA,CAAA,qBAAA,GAAA,qBAAA;AAIA;;AAEG;;AACH,SAAA,oBAAA,CAAqC,QAArC,EAAqD;AACnD,SAAO,CAAC,CAAC,GAAF,CAAM,QAAN,EAAgB,aAAhB,EAA+B,EAA/B,CAAP;AACD;;AAFD,OAAA,CAAA,oBAAA,GAAA,oBAAA;AAIA;;;;AAIG;;AACH,SAAA,mBAAA,CAAoC,QAApC,EAA2D;AACzD,SAAO,QAAQ,CAAC,IAAhB;AACD;;AAFD,OAAA,CAAA,mBAAA,GAAA,mBAAA;AAIA;;AAEG;;AACH,SAAA,aAAA,CAA8B,GAA9B,EAAyC;AACvC,MAAI,GAAG,CAAC,MAAJ,KAAe,CAAnB,EAAsB,OAAO,EAAP;AACtB,SAAO,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAP;AACD;;AAHD,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _ = require(\"lodash\");\r\n/**\r\n * Returns true if the specified value is not undefined.\r\n *\r\n * @param val Variable to test.\r\n * @return Whether variable is defined.\r\n */\r\nfunction isDef(val) {\r\n    // void 0 always evaluates to undefined and hence we do not need to depend on\r\n    // the definition of the global variable named 'undefined'.\r\n    return val !== void 0;\r\n}\r\nexports.isDef = isDef;\r\nfunction isEmptyString(val) {\r\n    return val.trim().length === 0;\r\n}\r\nexports.isEmptyString = isEmptyString;\r\nfunction isNotEmptyString(val) {\r\n    return val.trim().length > 0;\r\n}\r\nexports.isNotEmptyString = isNotEmptyString;\r\nfunction isNotEmpty(val) {\r\n    return _.isEmpty(val) === false;\r\n}\r\nexports.isNotEmpty = isNotEmpty;\r\n/**\r\n * Compare function for string values by field.\r\n * @return {function(*, *):number}\r\n */\r\nfunction compareStringByField(fieldName) {\r\n    return function (a, b) { return a[fieldName].localeCompare(b[fieldName], undefined, { numeric: true }); };\r\n}\r\nexports.compareStringByField = compareStringByField;\r\n/**\r\n * Number of digits greater than argument.\r\n *\r\n * Gets count of digits and compare with argument.\r\n * Note: this works only with integers, not floats.\r\n */\r\nfunction numberOfDigitsGreaterThan(val, digitsCount) {\r\n    return val.toString().length > digitsCount;\r\n}\r\nexports.numberOfDigitsGreaterThan = numberOfDigitsGreaterThan;\r\n/**\r\n * Extract `obj` from directual response.\r\n */\r\nfunction extractResponseObject(response) {\r\n    return _.get(response, 'obj', {});\r\n}\r\nexports.extractResponseObject = extractResponseObject;\r\n/**\r\n * Extract array result from directual response.\r\n */\r\nfunction extractResponseArray(response) {\r\n    return _.get(response, 'result.list', []);\r\n}\r\nexports.extractResponseArray = extractResponseArray;\r\n/**\r\n * Extract data from axios response.\r\n * @param {AxiosResponse} response\r\n * @return {*}\r\n */\r\nfunction extractResponseData(response) {\r\n    return response.data;\r\n}\r\nexports.extractResponseData = extractResponseData;\r\n/**\r\n * Convert string to array.\r\n */\r\nfunction stringToArray(val) {\r\n    if (val.length === 0)\r\n        return [];\r\n    return val.split(',');\r\n}\r\nexports.stringToArray = stringToArray;\r\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}