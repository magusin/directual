{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hugo\\\\code\\\\akatek\\\\directual\\\\src\\\\pages\\\\Page2.js\";\nimport React, { useEffect, useState, Checkbox } from 'react';\nimport Directual from 'directual-api';\nimport { useAuth } from '../auth';\nimport { Loader } from '../components/loader/loader';\nimport { Card, CardBody, CardHeader, CardText, CardTitle, Container } from 'reactstrap';\nimport { useParams } from 'react-router-dom'; // Example of getting data from Directual\n// Connect to Directual api\n\nconst api = new Directual({\n  apiHost: '/'\n});\n\nconst Page2 = () => {\n  const {\n    id\n  } = useParams(); // API-endpoint details\n\n  const dataStructure = 'product'; // todo: write here sysname of your data structure\n\n  const endpoint = 'getProduct'; // todo: write here Method name of your API-endpoint\n\n  console.log(useParams()); // connect authentication context\n\n  const auth = useAuth(); // Hooks for handling state\n\n  const [payload, setPayload] = useState([]); // API response\n\n  const [pageInfo, setPageInfo] = useState({}); // API response metadata, e.g. number of objects\n\n  const [loading, setLoading] = useState(true); // initial loader\n\n  const [badRequest, setBadRequest] = useState(); // API error message\n\n  const [pageSize] = useState(2); // Page size, bu default = 10\n\n  const [formPayload, setFormPayload] = useState(); // Data to send. Here we can add userID: auth.user by default\n\n  const [response, setResponse] = useState(); // API response\n\n  const [status, setStatus] = useState(); // Request status\n\n  const [showForm, setShowForm] = useState(true); // Show/hide the form\n  // Paging\n\n  useEffect(() => {\n    getData(id); // eslint-disable-next-line\n  }, []); // GET-request\n\n  function getData() {\n    api // Data structure\n    .structure(dataStructure) // GET request + query params (sessionID, page, pageSize by default)\n    .getData(endpoint, {\n      sessionID: auth.sessionID,\n      pageSize: pageSize,\n      id: id\n    }) // other possible query params:\n    // {{HttpRequest}} — any param for Filtering\n    // sort=FIELD_SYSNAME_1,desc,FIELD_SYSNAME_2,asc — sorting with multiple params\n    .then(response => {\n      setPayload(response.payload);\n      setPageInfo(response.pageInfo);\n      setLoading(false);\n    }).catch(e => {\n      // handling errors\n      setLoading(false);\n      console.log(e.response);\n      setBadRequest(e.response.status + ', ' + e.response.data.msg);\n    });\n  } // POST-request\n\n\n  function postData() {\n    setLoading(true);\n    setShowForm(false);\n    api // Data structure\n    .structure(dataStructure) // POST request + payload + query params:\n    .setData(endpoint, formPayload, {\n      sessionID: auth.sessionID\n    }).then(response => {\n      setResponse(response.result);\n      setStatus(response.status);\n      setLoading(false);\n    }).catch(e => {\n      // handling errors\n      setLoading(false);\n      console.log(e.response);\n      setBadRequest({\n        httpCode: e.response.status,\n        msg: e.response.data.msg\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, loading && /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }), payload && !loading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"request-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, \"Data structure: \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 35\n    }\n  }, dataStructure ? dataStructure : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 71\n    }\n  }, \"not provided\"))), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, \"API-endpoint: \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 33\n    }\n  }, endpoint ? endpoint : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 59\n    }\n  }, \"not provided\"))), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, \"Payload: \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 28\n    }\n  }, JSON.stringify(payload))), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Payload info: \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 33\n    }\n  }, JSON.stringify(pageInfo))), badRequest && /*#__PURE__*/React.createElement(\"code\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 28\n    }\n  }, \"Error: \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 59\n    }\n  }, badRequest))), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, payload.map(data => /*#__PURE__*/React.createElement(Card, {\n    className: \"border-1 border-primary text-center mb-2 \",\n    key: data.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CardTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }, data.title))), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"none\",\n    src: data.file,\n    className: \"image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(CardText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }, data.description)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 19\n    }\n  }, data.company)), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: postData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    otherProps: true,\n    onClick: e => {\n      setFormPayload({ ...formPayload,\n        'select': e.target.value = 'true'\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  })))))));\n};\n\nexport default Page2;","map":{"version":3,"sources":["C:/Users/Hugo/code/akatek/directual/src/pages/Page2.js"],"names":["React","useEffect","useState","Checkbox","Directual","useAuth","Loader","Card","CardBody","CardHeader","CardText","CardTitle","Container","useParams","api","apiHost","Page2","id","dataStructure","endpoint","console","log","auth","payload","setPayload","pageInfo","setPageInfo","loading","setLoading","badRequest","setBadRequest","pageSize","formPayload","setFormPayload","response","setResponse","status","setStatus","showForm","setShowForm","getData","structure","sessionID","then","catch","e","data","msg","postData","setData","result","httpCode","JSON","stringify","map","title","file","description","company","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Checkbox } from 'react'\r\nimport Directual from 'directual-api'\r\nimport { useAuth } from '../auth'\r\nimport { Loader } from '../components/loader/loader'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardText,\r\n  CardTitle,\r\n  Container\r\n} from 'reactstrap'\r\nimport {useParams} from 'react-router-dom'\r\n\r\n// Example of getting data from Directual\r\n\r\n// Connect to Directual api\r\nconst api = new Directual({ apiHost: '/' })\r\n\r\nconst Page2 = () => {\r\n  const {id} = useParams()\r\n  // API-endpoint details\r\n  const dataStructure = 'product' // todo: write here sysname of your data structure\r\n  const endpoint = 'getProduct' // todo: write here Method name of your API-endpoint\r\n  console.log(useParams())\r\n  // connect authentication context\r\n  const auth = useAuth()\r\n\r\n  // Hooks for handling state\r\n  const [payload, setPayload] = useState([]) // API response\r\n  const [pageInfo, setPageInfo] = useState({}) // API response metadata, e.g. number of objects\r\n  const [loading, setLoading] = useState(true) // initial loader\r\n  const [badRequest, setBadRequest] = useState() // API error message\r\n  const [pageSize] = useState(2) // Page size, bu default = 10\r\n  const [formPayload, setFormPayload] = useState(); // Data to send. Here we can add userID: auth.user by default\r\n  const [response, setResponse] = useState(); // API response\r\n  const [status, setStatus] = useState(); // Request status\r\n  const [showForm, setShowForm] = useState(true); // Show/hide the form\r\n\r\n  // Paging\r\n  useEffect(() => {\r\n    \r\n    getData((id))\r\n    // eslint-disable-next-line\r\n  }, [])\r\n   \r\n  // GET-request\r\n  function getData() {\r\n    api\r\n      // Data structure\r\n      .structure(dataStructure)\r\n      // GET request + query params (sessionID, page, pageSize by default)\r\n      .getData(endpoint, {\r\n        sessionID: auth.sessionID,\r\n        pageSize: pageSize,\r\n        id: id\r\n      })\r\n      // other possible query params:\r\n      // {{HttpRequest}} — any param for Filtering\r\n      // sort=FIELD_SYSNAME_1,desc,FIELD_SYSNAME_2,asc — sorting with multiple params\r\n      .then((response) => {\r\n        setPayload(response.payload)\r\n        setPageInfo(response.pageInfo)\r\n        setLoading(false)\r\n      })\r\n      .catch((e) => {\r\n        // handling errors\r\n        setLoading(false)\r\n        console.log(e.response)\r\n        setBadRequest(e.response.status + ', ' + e.response.data.msg)\r\n      })\r\n  }\r\n\r\n // POST-request\r\n function postData() {\r\n  setLoading(true)\r\n  setShowForm(false)\r\n  api\r\n    // Data structure\r\n    .structure(dataStructure)\r\n    // POST request + payload + query params:\r\n    .setData(endpoint, formPayload,\r\n      { sessionID: auth.sessionID })\r\n    .then((response) => {\r\n      setResponse(response.result)\r\n      setStatus(response.status)\r\n      setLoading(false)\r\n    })\r\n    .catch((e) => {\r\n      // handling errors\r\n      setLoading(false)\r\n      console.log(e.response)\r\n      setBadRequest({\r\n        httpCode: e.response.status,\r\n        msg: e.response.data.msg\r\n      })\r\n    })\r\n}\r\n  return (\r\n    <div className=\"content\">\r\n      {loading && <Loader />}\r\n      {payload && !loading && (\r\n        <div>\r\n          {/* API response */}\r\n          <div className=\"request-info\">\r\n            <span>Data structure: <b>{dataStructure ? dataStructure : <span className=\"error\">not provided</span>}</b></span>\r\n            <span>API-endpoint: <b>{endpoint ? endpoint : <span className=\"error\">not provided</span>}</b></span>\r\n            <span>Payload: <code>{JSON.stringify(payload)}</code></span>\r\n            <span>Payload info: <code>{JSON.stringify(pageInfo)}</code></span>\r\n            {badRequest && <code className=\"error\">Error: <b>{badRequest}</b></code>}\r\n          </div>\r\n          <Container>\r\n            {payload.map((data) => (\r\n              <Card\r\n                className=\"border-1 border-primary text-center mb-2 \"\r\n                key={data.id}\r\n              >\r\n                <CardHeader>\r\n                  <CardTitle>\r\n                    <h3>{data.title}</h3>\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <img alt='none' src={data.file} className='image'></img>\r\n                  <CardText>\r\n                    <p>{data.description}</p>\r\n                  </CardText>\r\n                  <p>{data.company}</p>\r\n                </CardBody>\r\n                <form onSubmit={postData} >\r\n                  \r\n                <input type='checkbox' otherProps onClick={(e) => {\r\n            setFormPayload({ ...formPayload, 'select': e.target.value ='true' })\r\n          }} />\r\n          </form>\r\n              </Card>\r\n            ))}\r\n          </Container>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Page2;\r\n"]},"metadata":{},"sourceType":"module"}