{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = require(\"lodash\");\n/**\n * Returns true if the specified value is not undefined.\n *\n * @param val Variable to test.\n * @return Whether variable is defined.\n */\n\n\nfunction isDef(val) {\n  // void 0 always evaluates to undefined and hence we do not need to depend on\n  // the definition of the global variable named 'undefined'.\n  return val !== void 0;\n}\n\nexports.isDef = isDef;\n\nfunction isEmptyString(val) {\n  return val.trim().length === 0;\n}\n\nexports.isEmptyString = isEmptyString;\n\nfunction isNotEmptyString(val) {\n  return val.trim().length > 0;\n}\n\nexports.isNotEmptyString = isNotEmptyString;\n\nfunction isNotEmpty(val) {\n  return _.isEmpty(val) === false;\n}\n\nexports.isNotEmpty = isNotEmpty;\n/**\n * Compare function for string values by field.\n * @return {function(*, *):number}\n */\n\nfunction compareStringByField(fieldName) {\n  return function (a, b) {\n    return a[fieldName].localeCompare(b[fieldName], undefined, {\n      numeric: true\n    });\n  };\n}\n\nexports.compareStringByField = compareStringByField;\n/**\n * Number of digits greater than argument.\n *\n * Gets count of digits and compare with argument.\n * Note: this works only with integers, not floats.\n */\n\nfunction numberOfDigitsGreaterThan(val, digitsCount) {\n  return val.toString().length > digitsCount;\n}\n\nexports.numberOfDigitsGreaterThan = numberOfDigitsGreaterThan;\n/**\n * Extract `obj` from directual response.\n */\n\nfunction extractResponseObject(response) {\n  return _.get(response, 'obj', {});\n}\n\nexports.extractResponseObject = extractResponseObject;\n/**\n * Extract array result from directual response.\n */\n\nfunction extractResponseArray(response) {\n  return _.get(response, 'result.list', []);\n}\n\nexports.extractResponseArray = extractResponseArray;\n/**\n * Extract data from axios response.\n * @param {AxiosResponse} response\n * @return {*}\n */\n\nfunction extractResponseData(response) {\n  return response.data;\n}\n\nexports.extractResponseData = extractResponseData;\n/**\n * Convert string to array.\n */\n\nfunction stringToArray(val) {\n  if (val.length === 0) return [];\n  return val.split(',');\n}\n\nexports.stringToArray = stringToArray;","map":{"version":3,"mappings":";;;;;;AACA;AAEA;;;;;;;;AAMA,eAAsBA,GAAtB,EAA8B;AAC5B;AACA;AACA,SAAOA,GAAG,KAAK,KAAK,CAApB;AACD;;AAJDC;;AAMA,uBAA8BD,GAA9B,EAAyC;AACvC,SAAOA,GAAG,CAACE,IAAJ,GAAWC,MAAX,KAAsB,CAA7B;AACD;;AAFDF;;AAIA,0BAAiCD,GAAjC,EAA4C;AAC1C,SAAOA,GAAG,CAACE,IAAJ,GAAWC,MAAX,GAAoB,CAA3B;AACD;;AAFDF;;AAIA,oBAA2BD,GAA3B,EAAmC;AACjC,SAAOI,CAAC,CAACC,OAAF,CAAUL,GAAV,MAAmB,KAA1B;AACD;;AAFDC;AAIA;;;;;AAIA,8BAAqCK,SAArC,EAAsD;AACpD,SAAO,UAACC,CAAD,EAASC,CAAT,EAAe;AAAK,YAAC,CAACF,SAAD,CAAD,CAAaG,aAAb,CAA2BD,CAAC,CAACF,SAAD,CAA5B,EAAyCI,SAAzC,EAAoD;AAAEC,aAAO,EAAE;AAAX,KAApD;AAAsE,GAAjG;AACD;;AAFDV;AAIA;;;;;;;AAMA,mCAA0CD,GAA1C,EAAuDY,WAAvD,EAA0E;AACxE,SAAOZ,GAAG,CAACa,QAAJ,GAAeV,MAAf,GAAwBS,WAA/B;AACD;;AAFDX;AAIA;;;;AAGA,+BAAsCa,QAAtC,EAAsD;AACpD,SAAOV,CAAC,CAACW,GAAF,CAAMD,QAAN,EAAgB,KAAhB,EAAuB,EAAvB,CAAP;AACD;;AAFDb;AAIA;;;;AAGA,8BAAqCa,QAArC,EAAqD;AACnD,SAAOV,CAAC,CAACW,GAAF,CAAMD,QAAN,EAAgB,aAAhB,EAA+B,EAA/B,CAAP;AACD;;AAFDb;AAIA;;;;;;AAKA,6BAAoCa,QAApC,EAA2D;AACzD,SAAOA,QAAQ,CAACE,IAAhB;AACD;;AAFDf;AAIA;;;;AAGA,uBAA8BD,GAA9B,EAAyC;AACvC,MAAIA,GAAG,CAACG,MAAJ,KAAe,CAAnB,EAAsB,OAAO,EAAP;AACtB,SAAOH,GAAG,CAACiB,KAAJ,CAAU,GAAV,CAAP;AACD;;AAHDhB","names":["val","exports","trim","length","_","isEmpty","fieldName","a","b","localeCompare","undefined","numeric","digitsCount","toString","response","get","data","split"],"sourceRoot":"","sources":["../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}