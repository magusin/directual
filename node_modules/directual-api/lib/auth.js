"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var axiosInstance = axios_1.default.create({
    headers: {
        post: {
            'Content-Type': 'application/json',
        },
    },
});
var Token = /** @class */ (function () {
    function Token(token, username, role) {
        this.sessionID = token;
        this.username = username;
        this.role = role;
    }
    return Token;
}());
exports.Token = Token;
var Auth = /** @class */ (function () {
    function Auth(config) {
        this.config = config;
    }
    Auth.prototype.isAuthenticated = function () {
        return Promise.resolve(false);
    };
    Auth.prototype.isAuthorize = function (sid, cb) {
        this.check(sid).then(function (res) {
            cb(res.result, res.token);
        });
    };
    Auth.prototype.login = function (login, pass) {
        return axiosInstance
            .request({
            method: 'POST',
            url: "/good/api/v5/auth",
            baseURL: "" + this.config.apiHost,
            params: __assign({}, this.config),
            data: {
                appID: this.config.appID,
                provider: 'rest',
                username: login,
                password: pass,
            },
        })
            .then(function (result) {
            if (result.status === 200 && result.data) {
                var token = new Token(result.data.result.token, result.data.result.username, result.data.result.role);
                return Promise.resolve(token);
            }
            return Promise.reject(new Error('No reason but to reject'));
        });
    };
    Auth.prototype.logout = function (sessionID) {
        return axiosInstance
            .request({
            method: 'GET',
            url: "/good/api/v4/auth/logout",
            baseURL: "" + this.config.apiHost,
            params: __assign({}, this.config, { sessionID: sessionID }),
            data: {
                appID: this.config.appID,
            },
        })
            .then(function (result) {
            return Promise.resolve();
        });
    };
    Auth.prototype.check = function (sessionID) {
        return axiosInstance
            .request({
            method: 'GET',
            url: "/good/api/v4/auth/check",
            baseURL: "" + this.config.apiHost,
            params: __assign({}, this.config, { sessionID: sessionID }),
        })
            .then(function (result) {
            return Promise.resolve(result.data.result);
        });
    };
    return Auth;
}());
exports.Auth = Auth;
//# sourceMappingURL=auth.js.map