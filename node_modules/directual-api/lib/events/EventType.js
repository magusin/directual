"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EventType;
(function (EventType) {
    // Mouse events
    EventType["CLICK"] = "click";
    EventType["RIGHTCLICK"] = "rightclick";
    EventType["DBLCLICK"] = "dblclick";
    EventType["MOUSEDOWN"] = "mousedown";
    EventType["MOUSEUP"] = "mouseup";
    EventType["MOUSEOVER"] = "mouseover";
    EventType["MOUSEOUT"] = "mouseout";
    EventType["MOUSEMOVE"] = "mousemove";
    EventType["MOUSEENTER"] = "mouseenter";
    EventType["MOUSELEAVE"] = "mouseleave";
    // Selection events.
    // https://www.w3.org/TR/selection-api/
    EventType["SELECTIONCHANGE"] = "selectionchange";
    EventType["SELECTSTART"] = "selectstart";
    // Wheel events
    // http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
    EventType["WHEEL"] = "wheel";
    // Key events
    EventType["KEYPRESS"] = "keypress";
    EventType["KEYDOWN"] = "keydown";
    EventType["KEYUP"] = "keyup";
    // Focus
    EventType["BLUR"] = "blur";
    EventType["FOCUS"] = "focus";
    EventType["DEACTIVATE"] = "deactivate";
    // NOTE: The following two events are not stable in cross-browser usage.
    //     WebKit and Opera implement DOMFocusIn/Out.
    //     IE implements focusin/out.
    //     Gecko implements neither see bug at
    //     https://bugzilla.mozilla.org/show_bug.cgi?id=396927.
    // The DOM Events Level 3 Draft deprecates DOMFocusIn in favor of focusin:
    //     http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/DOM3-Events.html
    // You can use FOCUS in Capture phase until implementations converge.
    // FOCUSIN: goog.userAgent.IE ? 'focusin' : 'DOMFocusIn',
    // FOCUSOUT: goog.userAgent.IE ? 'focusout' : 'DOMFocusOut',
    // Forms
    EventType["CHANGE"] = "change";
    EventType["RESET"] = "reset";
    EventType["SELECT"] = "select";
    EventType["SUBMIT"] = "submit";
    EventType["INPUT"] = "input";
    EventType["PROPERTYCHANGE"] = "propertychange";
    // Drag and drop
    EventType["DRAGSTART"] = "dragstart";
    EventType["DRAG"] = "drag";
    EventType["DRAGENTER"] = "dragenter";
    EventType["DRAGOVER"] = "dragover";
    EventType["DRAGLEAVE"] = "dragleave";
    EventType["DROP"] = "drop";
    EventType["DRAGEND"] = "dragend";
    // Touch events
    // Note that other touch events exist, but we should follow the W3C list here.
    // http://www.w3.org/TR/touch-events/#list-of-touchevent-types
    EventType["TOUCHSTART"] = "touchstart";
    EventType["TOUCHMOVE"] = "touchmove";
    EventType["TOUCHEND"] = "touchend";
    EventType["TOUCHCANCEL"] = "touchcancel";
    // Misc
    EventType["BEFOREUNLOAD"] = "beforeunload";
    EventType["CONSOLEMESSAGE"] = "consolemessage";
    EventType["CONTEXTMENU"] = "contextmenu";
    EventType["DEVICEMOTION"] = "devicemotion";
    EventType["DEVICEORIENTATION"] = "deviceorientation";
    EventType["DOMCONTENTLOADED"] = "DOMContentLoaded";
    EventType["ERROR"] = "error";
    EventType["HELP"] = "help";
    EventType["LOAD"] = "load";
    EventType["LOSECAPTURE"] = "losecapture";
    EventType["ORIENTATIONCHANGE"] = "orientationchange";
    EventType["READYSTATECHANGE"] = "readystatechange";
    EventType["RESIZE"] = "resize";
    EventType["SCROLL"] = "scroll";
    EventType["UNLOAD"] = "unload";
    // Media events
    EventType["CANPLAY"] = "canplay";
    EventType["CANPLAYTHROUGH"] = "canplaythrough";
    EventType["DURATIONCHANGE"] = "durationchange";
    EventType["EMPTIED"] = "emptied";
    EventType["ENDED"] = "ended";
    EventType["LOADEDDATA"] = "loadeddata";
    EventType["LOADEDMETADATA"] = "loadedmetadata";
    EventType["PAUSE"] = "pause";
    EventType["PLAY"] = "play";
    EventType["PLAYING"] = "playing";
    EventType["RATECHANGE"] = "ratechange";
    EventType["SEEKED"] = "seeked";
    EventType["SEEKING"] = "seeking";
    EventType["STALLED"] = "stalled";
    EventType["SUSPEND"] = "suspend";
    EventType["TIMEUPDATE"] = "timeupdate";
    EventType["VOLUMECHANGE"] = "volumechange";
    EventType["WAITING"] = "waiting";
    // Media Source Extensions events
    // https://www.w3.org/TR/media-source/#mediasource-events
    EventType["SOURCEOPEN"] = "sourceopen";
    EventType["SOURCEENDED"] = "sourceended";
    EventType["SOURCECLOSED"] = "sourceclosed";
    // https://www.w3.org/TR/media-source/#sourcebuffer-events
    EventType["ABORT"] = "abort";
    EventType["UPDATE"] = "update";
    EventType["UPDATESTART"] = "updatestart";
    EventType["UPDATEEND"] = "updateend";
    // HTML 5 History events
    // See http://www.w3.org/TR/html5/browsers.html#event-definitions-0
    EventType["HASHCHANGE"] = "hashchange";
    EventType["PAGEHIDE"] = "pagehide";
    EventType["PAGESHOW"] = "pageshow";
    EventType["POPSTATE"] = "popstate";
    // Copy and Paste
    // Support is limited. Make sure it works on your favorite browser
    // before using.
    // http://www.quirksmode.org/dom/events/cutcopypaste.html
    EventType["COPY"] = "copy";
    EventType["PASTE"] = "paste";
    EventType["CUT"] = "cut";
    EventType["BEFORECOPY"] = "beforecopy";
    EventType["BEFORECUT"] = "beforecut";
    EventType["BEFOREPASTE"] = "beforepaste";
    // HTML5 online/offline events.
    // http://www.w3.org/TR/offline-webapps/#related
    EventType["ONLINE"] = "online";
    EventType["OFFLINE"] = "offline";
    // HTML 5 worker events
    EventType["MESSAGE"] = "message";
    EventType["CONNECT"] = "connect";
    // Service Worker Events - ServiceWorkerGlobalScope context
    // See https://w3c.github.io/ServiceWorker/#execution-context-events
    // Note: message event defined in worker events section
    EventType["INSTALL"] = "install";
    EventType["ACTIVATE"] = "activate";
    EventType["FETCH"] = "fetch";
    EventType["FOREIGNFETCH"] = "foreignfetch";
    EventType["MESSAGEERROR"] = "messageerror";
    // Service Worker Events - Document context
    // See https://w3c.github.io/ServiceWorker/#document-context-events
    EventType["STATECHANGE"] = "statechange";
    EventType["UPDATEFOUND"] = "updatefound";
    EventType["CONTROLLERCHANGE"] = "controllerchange";
    // CSS animation events.
    /** @suppress {missingRequire} */
    // ANIMATIONSTART: goog.events.getVendorPrefixedName_('AnimationStart'),
    /** @suppress {missingRequire} */
    // ANIMATIONEND: goog.events.getVendorPrefixedName_('AnimationEnd'),
    /** @suppress {missingRequire} */
    // ANIMATIONITERATION: goog.events.getVendorPrefixedName_('AnimationIteration'),
    // CSS transition events. Based on the browser support described at:
    // https://developer.mozilla.org/en/css/css_transitions#Browser_compatibility
    /** @suppress {missingRequire} */
    // TRANSITIONEND: goog.events.getVendorPrefixedName_('TransitionEnd'),
    // W3C Pointer Events
    // http://www.w3.org/TR/pointerevents/
    EventType["POINTERDOWN"] = "pointerdown";
    EventType["POINTERUP"] = "pointerup";
    EventType["POINTERCANCEL"] = "pointercancel";
    EventType["POINTERMOVE"] = "pointermove";
    EventType["POINTEROVER"] = "pointerover";
    EventType["POINTEROUT"] = "pointerout";
    EventType["POINTERENTER"] = "pointerenter";
    EventType["POINTERLEAVE"] = "pointerleave";
    EventType["GOTPOINTERCAPTURE"] = "gotpointercapture";
    EventType["LOSTPOINTERCAPTURE"] = "lostpointercapture";
    // IE specific events.
    // See http://msdn.microsoft.com/en-us/library/ie/hh772103(v=vs.85).aspx
    // Note: these events will be supplanted in IE11.
    EventType["MSGESTURECHANGE"] = "MSGestureChange";
    EventType["MSGESTUREEND"] = "MSGestureEnd";
    EventType["MSGESTUREHOLD"] = "MSGestureHold";
    EventType["MSGESTURESTART"] = "MSGestureStart";
    EventType["MSGESTURETAP"] = "MSGestureTap";
    EventType["MSGOTPOINTERCAPTURE"] = "MSGotPointerCapture";
    EventType["MSINERTIASTART"] = "MSInertiaStart";
    EventType["MSLOSTPOINTERCAPTURE"] = "MSLostPointerCapture";
    EventType["MSPOINTERCANCEL"] = "MSPointerCancel";
    EventType["MSPOINTERDOWN"] = "MSPointerDown";
    EventType["MSPOINTERENTER"] = "MSPointerEnter";
    EventType["MSPOINTERHOVER"] = "MSPointerHover";
    EventType["MSPOINTERLEAVE"] = "MSPointerLeave";
    EventType["MSPOINTERMOVE"] = "MSPointerMove";
    EventType["MSPOINTEROUT"] = "MSPointerOut";
    EventType["MSPOINTEROVER"] = "MSPointerOver";
    EventType["MSPOINTERUP"] = "MSPointerUp";
    // Native IMEs/input tools events.
    EventType["TEXT"] = "text";
    // The textInput event is supported in IE9+, but only in lower case. All other
    // browsers use the camel-case event name.
    // TEXTINPUT: goog.userAgent.IE ? 'textinput' : 'textInput',
    EventType["COMPOSITIONSTART"] = "compositionstart";
    EventType["COMPOSITIONUPDATE"] = "compositionupdate";
    EventType["COMPOSITIONEND"] = "compositionend";
    // The beforeinput event is initially only supported in Safari. See
    // https://bugs.chromium.org/p/chromium/issues/detail?id=342670 for Chrome
    // implementation tracking.
    EventType["BEFOREINPUT"] = "beforeinput";
    // Webview tag events
    // See http://developer.chrome.com/dev/apps/webview_tag.html
    EventType["EXIT"] = "exit";
    EventType["LOADABORT"] = "loadabort";
    EventType["LOADCOMMIT"] = "loadcommit";
    EventType["LOADREDIRECT"] = "loadredirect";
    EventType["LOADSTART"] = "loadstart";
    EventType["LOADSTOP"] = "loadstop";
    EventType["RESPONSIVE"] = "responsive";
    EventType["SIZECHANGED"] = "sizechanged";
    EventType["UNRESPONSIVE"] = "unresponsive";
    // HTML5 Page Visibility API.  See details at
    // {@code goog.labs.dom.PageVisibilityMonitor}.
    EventType["VISIBILITYCHANGE"] = "visibilitychange";
    // LocalStorage event.
    EventType["STORAGE"] = "storage";
    // DOM Level 2 mutation events (deprecated).
    EventType["DOMSUBTREEMODIFIED"] = "DOMSubtreeModified";
    EventType["DOMNODEINSERTED"] = "DOMNodeInserted";
    EventType["DOMNODEREMOVED"] = "DOMNodeRemoved";
    EventType["DOMNODEREMOVEDFROMDOCUMENT"] = "DOMNodeRemovedFromDocument";
    EventType["DOMNODEINSERTEDINTODOCUMENT"] = "DOMNodeInsertedIntoDocument";
    EventType["DOMATTRMODIFIED"] = "DOMAttrModified";
    EventType["DOMCHARACTERDATAMODIFIED"] = "DOMCharacterDataModified";
    // Print events.
    EventType["BEFOREPRINT"] = "beforeprint";
    EventType["AFTERPRINT"] = "afterprint";
})(EventType = exports.EventType || (exports.EventType = {}));
//# sourceMappingURL=EventType.js.map